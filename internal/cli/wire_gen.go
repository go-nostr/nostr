// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-nostr/nostr/client"
	"github.com/go-nostr/nostr/internal/command/authcommand"
	"github.com/go-nostr/nostr/internal/command/closecommand"
	"github.com/go-nostr/nostr/internal/command/countcommand"
	"github.com/go-nostr/nostr/internal/command/eventcommand"
	"github.com/go-nostr/nostr/internal/command/noticecommand"
	"github.com/go-nostr/nostr/internal/command/okcommand"
	"github.com/go-nostr/nostr/internal/command/requestcommand"
)

// Injectors from wire.go:

func buildAuthCommand() *authcommand.AuthCommand {
	authCommand := authcommand.New()
	return authCommand
}

func buildCountCommand() *countcommand.CountCommand {
	countCommand := countcommand.New()
	return countCommand
}

func buildCloseCommand() *closecommand.CloseCommand {
	closeCommand := closecommand.New()
	return closeCommand
}

func buildEventCommand() *eventcommand.EventCommand {
	client := buildClient()
	options := &eventcommand.Options{
		Client: client,
	}
	eventCommand := eventcommand.New(options)
	return eventCommand
}

func buildNoticeCommand() *noticecommand.NoticeCommand {
	noticeCommand := noticecommand.New()
	return noticeCommand
}

func buildOkCommand() *okcommand.OkCommand {
	okCommand := okcommand.New()
	return okCommand
}

func buildRequestCommand() *requestcommand.RequestCommand {
	client := buildClient()
	options := &requestcommand.Options{
		Client: client,
	}
	requestCommand := requestcommand.New(options)
	return requestCommand
}

// wire.go:

func buildClient() *client.Client {
	return client.New(nil)
}
